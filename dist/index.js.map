{"version":3,"sources":["index.js"],"names":["rackspace","hostname","key","secret","userAgent","version","getYear","date","Date","getFullYear","getMonth","getDay","getDate","getHours","getMinutes","getSeconds","getTime","getHash","time","crypto","createHash","update","digest","buildSignature","buildHeaders","Accept","buildOptions","method","url","headers","path","apiResponse","response","resolve","output","on","chunk","res","JSON","parse","error","init","api","data","Promise","reject","request","https","end","stringify"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,YAAY;AACjBC,WAAU,mBADO;AAEjBC,MAAK,EAFY;AAGjBC,SAAQ,EAHS;AAIjBC,YAAW,6BAJM;AAKjBC,UAAS;AALQ,CAAlB;;AAQA,MAAMC,UAAU,CAACC,OAAO,IAAIC,IAAJ,EAAR,KAAuBD,KAAKE,WAAL,EAAvC;AACA,MAAMC,WAAW,CAACH,OAAO,IAAIC,IAAJ,EAAR,KAAwBD,KAAKG,QAAL,KAAkB,CAAlB,GAAsB,EAAtB,GAA4B,IAAGH,KAAKG,QAAL,KAAkB,CAAE,EAAnD,GAAuDH,KAAKG,QAAL,KAAkB,CAAlH;AACA,MAAMC,SAAS,CAACJ,OAAO,IAAIC,IAAJ,EAAR,KAAwBD,KAAKK,OAAL,KAAiB,EAAjB,GAAuB,IAAGL,KAAKK,OAAL,EAAe,EAAzC,GAA6CL,KAAKK,OAAL,EAApF;AACA,MAAMC,WAAW,CAACN,OAAO,IAAIC,IAAJ,EAAR,KAAwBD,KAAKM,QAAL,KAAkB,EAAlB,GAAwB,IAAGN,KAAKM,QAAL,EAAgB,EAA3C,GAA+CN,KAAKM,QAAL,EAAxF;AACA,MAAMC,aAAa,CAACP,OAAO,IAAIC,IAAJ,EAAR,KAAwBD,KAAKO,UAAL,KAAoB,EAApB,GAA0B,IAAGP,KAAKO,UAAL,EAAkB,EAA/C,GAAmDP,KAAKO,UAAL,EAA9F;AACA,MAAMC,aAAa,CAACR,OAAO,IAAIC,IAAJ,EAAR,KAAwBD,KAAKQ,UAAL,KAAoB,EAApB,GAA0B,IAAGR,KAAKQ,UAAL,EAAkB,EAA/C,GAAmDR,KAAKQ,UAAL,EAA9F;AACA,MAAMC,UAAU,CAACT,OAAO,IAAIC,IAAJ,EAAR,KAAwB,GAAEF,QAAQC,IAAR,CAAc,GAAEG,SAASH,IAAT,CAAe,GAAEI,OAAOJ,IAAP,CAAa,GAAEM,SAASN,IAAT,CAAe,GAAEO,WAAWP,IAAX,CAAiB,GAAEQ,WAAWR,IAAX,CAAiB,EAA/I;;AAEA,MAAMU,UAAWC,IAAD,IACfC,iBACEC,UADF,CACa,MADb,EAEEC,MAFF,CAEU,GAAErB,UAAUE,GAAI,GAAEF,UAAUI,SAAU,GAAEc,IAAK,GAAElB,UAAUG,MAAO,EAF1E,EAGEmB,MAHF,CAGS,QAHT,CADD;AAKA,MAAMC,iBAAiB,CAACL,OAAOF,SAAR,KAAuB,GAAEhB,UAAUE,GAAI,IAAGgB,IAAK,IAAGD,QAAQC,IAAR,CAAc,EAAvF;AACA,MAAMM,eAAe,OAAO;AAC3BC,SAAQ,kBADmB;AAE3B,iBAAgB,kBAFW;AAG3B,eAAczB,UAAUI,SAHG;AAI3B,oBAAmBmB;AAJQ,CAAP,CAArB;AAMA,MAAMG,eAAe,CAACC,MAAD,EAASC,GAAT,MAAkB;AACtCC,UAASL,cAD6B;AAEtCvB,WAAUD,UAAUC,QAFkB;AAGtC0B,OAHsC;AAItCG,OAAO,IAAG9B,UAAUK,OAAQ,GAAEuB,GAAI;AAJI,CAAlB,CAArB;;AAOA,MAAMG,cAAc,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAC1C,KAAIC,SAAS,EAAb;;AAEAF,UAASG,EAAT,CAAY,MAAZ,EAAqBC,KAAD,IAAW;AAC9BF,YAAUE,KAAV;AACA,EAFD;;AAIAJ,UAASG,EAAT,CAAY,KAAZ,EAAmB,MAAM;AACxB,MAAI;AACH,SAAME,MAAMC,KAAKC,KAAL,CAAWL,MAAX,CAAZ;;AAEAD,WAAQI,GAAR;AACA,GAJD,CAIE,OAAOG,KAAP,EAAc;AACfP,WAAQC,MAAR;AACA;AACD,EARD;AASA,CAhBD;;AAkBO,MAAMO,sBAAO,CAACvC,GAAD,EAAMC,MAAN,KAAiB;AACpCH,WAAUE,GAAV,GAAgBA,GAAhB;AACAF,WAAUG,MAAV,GAAmBA,MAAnB;AACA,CAHM;;AAKA,MAAMuC,oBAAM,CAACf,MAAD,EAASC,GAAT,EAAce,IAAd,KAClB,IAAIC,OAAJ,CAAY,CAACX,OAAD,EAAUY,MAAV,KAAqB;AAChC,OAAMC,UAAUC,gBAAMD,OAAN,CAAcpB,aAAaC,MAAb,EAAqBC,GAArB,CAAd,EAA0CI,QAAD,IAAcD,YAAYC,QAAZ,EAAsBC,OAAtB,CAAvD,CAAhB;;AAEAa,SAAQX,EAAR,CAAW,OAAX,EAAqBK,KAAD,IAAW;AAC9BK,SAAOL,KAAP;AACA,EAFD;;AAIA,KAAIG,IAAJ,EAAU;AACTG,UAAQE,GAAR,CAAYV,KAAKW,SAAL,CAAeN,IAAf,CAAZ;AACA,EAFD,MAEO;AACNG,UAAQE,GAAR;AACA;AACD,CAZD,CADM;;kBAeQ;AACdN,IADc;AAEdD;AAFc,C","file":"index.js","sourcesContent":["import crypto from 'crypto';\nimport https from 'https';\n\nconst rackspace = {\n\thostname: 'api.emailsrvr.com',\n\tkey: '',\n\tsecret: '',\n\tuserAgent: 'rackspace-email-api-wrapper',\n\tversion: 'v1',\n};\n\nconst getYear = (date = new Date()) => date.getFullYear();\nconst getMonth = (date = new Date()) => (date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1);\nconst getDay = (date = new Date()) => (date.getDate() < 10 ? `0${date.getDate()}` : date.getDate());\nconst getHours = (date = new Date()) => (date.getHours() < 10 ? `0${date.getHours()}` : date.getHours());\nconst getMinutes = (date = new Date()) => (date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes());\nconst getSeconds = (date = new Date()) => (date.getSeconds() < 10 ? `0${date.getSeconds()}` : date.getSeconds());\nconst getTime = (date = new Date()) => `${getYear(date)}${getMonth(date)}${getDay(date)}${getHours(date)}${getMinutes(date)}${getSeconds(date)}`;\n\nconst getHash = (time) =>\n\tcrypto\n\t\t.createHash('sha1')\n\t\t.update(`${rackspace.key}${rackspace.userAgent}${time}${rackspace.secret}`)\n\t\t.digest('base64');\nconst buildSignature = (time = getTime()) => `${rackspace.key}:${time}:${getHash(time)}`;\nconst buildHeaders = () => ({\n\tAccept: 'application/json',\n\t'Content-Type': 'application/json',\n\t'User-Agent': rackspace.userAgent,\n\t'X-Api-Signature': buildSignature(),\n});\nconst buildOptions = (method, url) => ({\n\theaders: buildHeaders(),\n\thostname: rackspace.hostname,\n\tmethod,\n\tpath: `/${rackspace.version}${url}`,\n});\n\nconst apiResponse = (response, resolve) => {\n\tlet output = '';\n\n\tresponse.on('data', (chunk) => {\n\t\toutput += chunk;\n\t});\n\n\tresponse.on('end', () => {\n\t\ttry {\n\t\t\tconst res = JSON.parse(output);\n\n\t\t\tresolve(res);\n\t\t} catch (error) {\n\t\t\tresolve(output);\n\t\t}\n\t});\n};\n\nexport const init = (key, secret) => {\n\trackspace.key = key;\n\trackspace.secret = secret;\n};\n\nexport const api = (method, url, data) =>\n\tnew Promise((resolve, reject) => {\n\t\tconst request = https.request(buildOptions(method, url), (response) => apiResponse(response, resolve));\n\n\t\trequest.on('error', (error) => {\n\t\t\treject(error);\n\t\t});\n\n\t\tif (data) {\n\t\t\trequest.end(JSON.stringify(data));\n\t\t} else {\n\t\t\trequest.end();\n\t\t}\n\t});\n\nexport default {\n\tapi,\n\tinit,\n};\n"]}